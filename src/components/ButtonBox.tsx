import React, { FC } from "react";

interface ButtonBoxProps {
  questions: {
    hexId: string;
    markedForReview: boolean;
    seen: boolean;
    chosenOptionId: string | null;
  }[];
  activeQuestionId: string;
  setActiveQuestionId: React.Dispatch<React.SetStateAction<string>>;
  // setChosenOptionId: React.Dispatch<React.SetStateAction<string | null>>
}
// return (
//   <div className="bg-[#282828] mx-8 px-6 py-4 max-w-screen-lg">
//     <div className="grid grid-cols-4 gap-4">
//       {questions.map((q, index) => (
//         <button
//         onClick={() => {setActiveQuestionId(q.hexId)}}
//           key={index}
//           className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 mx-2 rounded-full square-button w-12 h-12"
//           // style={{ width: '50px', height: '50px' }}
//         >
//           {index + 1}
//         </button>
//       ))}
//     </div>
//   </div>
// );
const ButtonBox: FC<ButtonBoxProps> = ({ questions, setActiveQuestionId, activeQuestionId }) => {
  return (
    <div className="rounded-[0.5rem] shadow-md flex justify-center bg-[#282828] p-5 mx-6">
      <div className="w-64">
        <div className="grid grid-cols-4 gap-2">
          {questions.map((q, index) => {
            let border = "border-transparent";
            /**
             * seen    unmarked  chosen    |   green
             * seen    marked    chosen    |   purple + tick
             * seen    unmarked  unchosen  |   red
             * seen    marked    unchosen  |   purple
             * unseen                      |   transparent
             */
            if (q.seen && !q.markedForReview && q.chosenOptionId != null) {
              border = "border-green-500";
            } else if (q.seen && q.markedForReview && q.chosenOptionId != null) {
              border = "border-purple-600";
            } else if (q.seen && !q.markedForReview && q.chosenOptionId == null) {
              border = "border-red-500";
            } else if (q.seen && q.markedForReview && q.chosenOptionId == null) {
              border = "border-purple-600";
            } else if (!q.seen) {
              border = "border-transparent";
            }

            border += " border-[1px]";
            return (
              <button
                key={index}
                className={`
                  py-2 
                  px-4 
                  ${activeQuestionId === q.hexId ? "bg-[#474747]" : "bg-[#333333]"}
                  hover:bg-[#474747] 
                  ${border}
                  rounded-[0.5rem] 
                  flex 
                  items-center 
                  justify-center 
                  m-1
                `}
                onClick={() => {
                  setActiveQuestionId(q.hexId);
                }}
              >
                {index + 1}
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default ButtonBox;
