import axios from "axios";
import React, { ChangeEvent, FC, FormEvent, useState } from "react";
import {
  LoaderFunction,
  LoaderFunctionArgs,
  redirect,
  useLoaderData,
  useNavigate,
} from "react-router-dom";

const CreateQuestion: FC = ({}) => {
  const testData = useLoaderData() as { name: string; hexId: string }[];
  const navigate = useNavigate();
  const [questionType, setQuestionType] = useState<string>("mcq");
  const [correctOption, setCorrectOption] = useState("0");
  const [statement, setStatement] = useState("");
  const [correctAnswer, setCorrectAnswer] = useState<number>(0);
  const [selectedTestId, setSelectedTestId] = useState(testData[0].hexId);
  let option: string[] = new Array(4);
  let setOption: React.Dispatch<React.SetStateAction<string>>[] = new Array(4);
  for (let i = 0; i < 4; ++i) {
    [option[i], setOption[i]] = useState("");
  }
  /** const createNewTestHandler = () => {
    axios
      .post("http://localhost:8080/api/tests/init-test", { withCredentials: true })
      .then((response) => {
        console.log(response);
      })
      .catch((_err) => {
        console.log("something went wrong while trying to create a new test!");
      });
  }; */
  const selectedTestIdChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {
    setSelectedTestId(e.currentTarget.value);
  };
  const correctAnswerChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.currentTarget.value === "") {
      setCorrectAnswer(0);
    } else {
      setCorrectAnswer(parseInt(e.currentTarget.value));
    }
  };
  const statementChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {
    setStatement(e.currentTarget.value);
  };
  const questionTypeChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {
    setQuestionType(e.currentTarget.value);
  };
  const correctOptionChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {
    setCorrectOption(e.currentTarget.value);
  };

  const formSubmitHandler = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (questionType === "mcq") {
      axios
        .put(
          `http://localhost:8080/api/tests/${selectedTestId}/questions`,
          {
            statement: statement,
            questionType: "mcq",
            options: option.map((value) => ({ statement: value })),
            correctAnswer: correctOption,
          },
          { withCredentials: true }
        )
        .then((_response) => {
          navigate(0);
        });
    } else {
      axios
        .put(
          `http://localhost:8080/api/tests/${selectedTestId}/questions`,
          {
            statement: statement,
            questionType: "number",
            correctAnswer: correctAnswer.toString(),
          },
          { withCredentials: true }
        )
        .then((_response) => {
          navigate(0);
        });
    }
  };
  return (
    <React.Fragment>
      <form onSubmit={formSubmitHandler}>
        <div className="p-6">
          <label className="text-slate-200 pr-3" htmlFor="testName">
            Select Test
          </label>
          <select
            value={selectedTestId}
            onChange={selectedTestIdChangeHandler}
            className="bg-slate-400 p-2"
            id="testName"
            name="testName"
          >
            {testData.map((test) => {
              return (
                <option key={test.hexId} value={test.hexId}>
                  {test.name}
                </option>
              );
            })}
          </select>
        </div>
        <div className="p-6">
          <label className="text-slate-200 pr-3" htmlFor="questionType">
            Select Question Type
          </label>
          <select
            value={questionType}
            onChange={questionTypeChangeHandler}
            className="bg-slate-400 p-2"
            id="testName"
            name="testName"
          >
            <option value="mcq">mcq</option>
            <option value="numerical">numerical</option>
          </select>
        </div>
        <div className="p-3">
          <label className="text-slate-200 pr-2" htmlFor="statement">
            Statement:
          </label>
          <input
            value={statement}
            onChange={statementChangeHandler}
            className="bg-slate-400 rounded p-3"
            type="text"
            id="statement"
            name="statement"
          />
        </div>
        {questionType === "mcq" && (
          <React.Fragment>
            {[0, 1, 2, 3].map((value) => {
              return (
                <div key={value} className="p-6">
                  <label className="text-slate-200 pr-2" htmlFor={`option${value}`}>
                    Option {value + 1}:
                  </label>
                  <input
                    value={option[value]}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                      setOption[value](e.currentTarget.value);
                    }}
                    className="bg-slate-400 rounded p-3"
                    type="text"
                    id={`option${value}`}
                    name="options"
                  />
                </div>
              );
            })}
            <div>
              <label className="text-slate-200 pr-2" htmlFor="correctOption">
                Correct Option:
              </label>
              <select
                value={correctOption}
                onChange={correctOptionChangeHandler}
                className="bg-slate-400 p-2"
                id="correctOption"
                name="correctOption"
              >
                <option value="0">Option 1</option>
                <option value="1">Option 2</option>
                <option value="2">Option 3</option>
                <option value="3">Option 4</option>
              </select>
            </div>{" "}
          </React.Fragment>
        )}

        {questionType === "numerical" && (
          <div className="p-3">
            <label className="text-slate-200 pr-2" htmlFor="correctAnswer">
              Correct Answer:
            </label>
            <input
              value={correctAnswer}
              onChange={correctAnswerChangeHandler}
              className="bg-slate-400 rounded p-3"
              type="number"
              id="statement"
              name="statement"
            />
          </div>
        )}

        <button className="bg-blue-500 hover:bg-blue-600 rounded-md p-3 mt-3" type="submit">
          Submit
        </button>
      </form>
    </React.Fragment>
  );
};

export default CreateQuestion;

export const CreateQuestionLoader: LoaderFunction = async (_args: LoaderFunctionArgs) => {
  const authResponse = await axios.get("http://localhost:8080/api/me", {
    withCredentials: true,
  });
  console.log(authResponse.data);
  if (!authResponse.data.isLoggedIn || !(authResponse.data.userStatus === "admin")) {
    return redirect("/");
  }
  const response = await axios.get("http://localhost:8080/api/tests", { withCredentials: true });
  return response.data;
};
