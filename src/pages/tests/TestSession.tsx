import { FC } from "react";
import { LoaderFunction, LoaderFunctionArgs, redirect, useLoaderData } from "react-router-dom";
import ButtonBox from "../../components/ButtonBox";
import axios, { Axios, AxiosError } from "axios";
import Clock from "../../components/Clock";

interface TestSessionProps {}

const TestSession: FC<TestSessionProps> = ({}) => {
  //TODO: Fix type in efficient way
  const loaderData = useLoaderData() as any;
  const startTime = new Date(loaderData.startTime);
  return (
    <>
      {/* <div className="h-screen w-screen bg-[#202020] text-[#e2e2e2]">
        content
      </div> */}
      <div className="flex flex-col h-screen w-screen bg-[#202020] text-[#e2e2e2]">
        <Clock startDate={startTime} />
        <ButtonBox />
      </div>
    </>
  );
};

export default TestSession;

export const TestSessionLoader: LoaderFunction = async (args: LoaderFunctionArgs) => {
  /**
   * validate if session exists.
   *    1. [done] extract params.testId.
   *    2. [done] Send request to backend. Backend must validate if user.ongoingTestSession is of this test.
   *    3. [done] Backend must automatically destroy the session once timer runs out or submit test has been clicked.
   * If Yes:
   *    1. A lot of information has to be pulled. Not sure how to proceed, and whether to proceed in parts.
   *    2. For now questions will be pulled with following fields {subject, type, hexId}
   *    3. A list of buttons is created, under respective subject.
   *        i. On button click question information is pulled from backend.
   *            a. Backend must validate if question belongs to test. And if the test session exists.
   *        ii. Display the information accordingly.
   * loader @return {
   *
   * }
   */
  console.log("inside TestSession.tsx loader");
  // return redirect("/")
  const testId = args.params.testId;
  try {
    const response = await axios.get(`http://localhost:8080/api/tests/${testId}/status`, {
      withCredentials: true,
    });
    console.log("response = ", response);
    if (response.status === 200) {
      const startTime = response.data.startTime;
      return {
        startTime,
      };
    }
  } catch (err: any) {
    if(!(err instanceof AxiosError)) {
      //I am only epxecting AxiosError in this catch statement
      throw err;
    }
    if (err.response?.status === 401) {
      console.log("Unauthorized request was made. You are being redirected to home page");
      return redirect("/");
    }
  }

  // axios
  //   .get(`http://localhost:8080/api/tests/${testId}/status`, {
  //     withCredentials: true,
  //   })
  //   .then((response) => {
  //     console.log("response = ", response);
  //     if (response.status === 200) {
  //       const startTime = response.data.startTime;
  //       return {
  //         startTime,
  //       };
  //     }
  //   })
  //   .catch((err) => {
  //     if (err.response.status === 401) {
  //       console.log("Unauthorized request was made. You are being redirected to home page");
  //       return redirect("/");
  //     }
  //   }).finally(() => {
  //     redirect("/")
  //   });
  return null;
};
